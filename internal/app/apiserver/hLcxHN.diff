--- -	2020-12-19 17:26:47.926071656 +0300
+++ /home/eugenearch/Code/github.com/eugenefoxx/http-rest-api-starline/internal/app/apiserver/server.go	2020-12-19 17:25:09.623065399 +0300
@@ -12,7 +12,6 @@
 	"net/http"
 	"os"
 	"strconv"
-	"strings"
 	"time"
 
 	"github.com/eugenefoxx/http-rest-api-starline/internal/app/model"
@@ -79,27 +78,21 @@
 	s.router.Use(handlers.CORS(handlers.AllowedOrigins([]string{"*"})))
 
 	s.router.HandleFunc("/test", s.diaplayPage())
+
+	s.router.HandleFunc("/users", s.pagehandleUsersCreate()).Methods("GET")
+	s.router.HandleFunc("/users", s.handleUsersCreate()).Methods("POST")
+
 	s.router.HandleFunc("/login", s.pagehandleSessionsCreate()).Methods("GET")
 	s.router.HandleFunc("/login", s.handleSessionsCreate()).Methods("POST")
 	s.router.HandleFunc("/logout", s.signOut()).Methods("GET")
 
+	s.router.HandleFunc("/statusinspection", s.authMiddleware(s.pageInspection())).Methods("GET")
 	s.router.HandleFunc("/insertvendor", s.authMiddleware(s.pageinsertVendor())).Methods("GET")
 	s.router.HandleFunc("/insertvendor", s.authMiddleware(s.insertVendor())).Methods("POST")
 
 	s.router.HandleFunc("/showvendor", s.authMiddleware(s.pageVendor())).Methods("GET")
 	s.router.HandleFunc("/updatevendor/{ID:[0-9]+}", s.authMiddleware(s.pageupdateVendor())).Methods("GET")
 	s.router.HandleFunc("/updatevendor/{ID:[0-9]+}", s.authMiddleware(s.updateVendor())).Methods("POST")
-	s.router.HandleFunc("/deletevendor/{ID:[0-9]+}", s.authMiddleware(s.deleteVendor())) //.Methods("DELETE")
-
-	s.router.HandleFunc("/ininspection", s.authMiddleware(s.pageinInspection())).Methods("GET")
-	s.router.HandleFunc("/ininspection", s.authMiddleware(s.inInspection())).Methods("POST")
-
-	s.router.HandleFunc("/statusinspection", s.authMiddleware(s.pageInspection())).Methods("GET")
-	s.router.HandleFunc("/updateinspection/{ID:[0-9]+}", s.authMiddleware(s.pageupdateInspection())).Methods("GET")
-	s.router.HandleFunc("/updateinspection/{ID:[0-9]+}", s.authMiddleware(s.updateInspection())).Methods("POST")
-	s.router.HandleFunc("/deleteinspection/{ID:[0-9]+}", s.authMiddleware(s.deleteInspection()))
-0
-	s.router.HandleFunc("/statusinspectionforwh", s.authMiddleware(s.pageListAcceptWHInspection())).Methods("GET")
 
 	s.router.HandleFunc("/main", s.authMiddleware(s.main())).Methods("GET")
 	s.router.HandleFunc("/", s.upload()).Methods("GET")
@@ -213,6 +206,44 @@
 	}
 }
 
+func (s *server) pagehandleUsersCreate() http.HandlerFunc {
+	//	tpl = template.Must(template.New("").Delims("<<", ">>").ParseFiles("web/templates/register.html"))
+	//tpl, err := template.New("").Delims("<<", ">>").ParseFiles("web/templates/register.html")
+	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "register.html")
+	///	if err != nil {
+	///		panic(err)
+	///	}
+	return func(w http.ResponseWriter, r *http.Request) {
+		//	var body, _ = helper.LoadFile("./web/templates/register.html")
+		//	fmt.Fprintf(w, body)
+		tpl.ExecuteTemplate(w, "register.html", nil)
+		///	err = tpl.ExecuteTemplate(w, "layout", nil)
+		///	if err != nil {
+		///		http.Error(w, err.Error(), 400)
+		///		return
+		///	}
+	}
+}
+
+func (s *server) pagehandleUsersCreate() http.HandlerFunc {
+	//	tpl = template.Must(template.New("").Delims("<<", ">>").ParseFiles("web/templates/register.html"))
+	//tpl, err := template.New("").Delims("<<", ">>").ParseFiles("web/templates/register.html")
+	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "register.html")
+	///	if err != nil {
+	///		panic(err)
+	///	}
+	return func(w http.ResponseWriter, r *http.Request) {
+		//	var body, _ = helper.LoadFile("./web/templates/register.html")
+		//	fmt.Fprintf(w, body)
+		tpl.ExecuteTemplate(w, "register.html", nil)
+		///	err = tpl.ExecuteTemplate(w, "layout", nil)
+		///	if err != nil {
+		///		http.Error(w, err.Error(), 400)
+		///		return
+		///	}
+	}
+}
+
 func (s *server) upload() http.HandlerFunc {
 	//	type Page struct {
 	//		TitleDOC, Navbar string
@@ -938,11 +969,12 @@
 }
 
 func (s *server) pageupdateVendor() http.HandlerFunc {
-	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "updatevendor.html")
-	///	if err != nil {
+	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles("./web/templates/updatevendor.html")
+	///if err != nil {
 	///		panic(err)
-	///	}
+	///}
 	return func(w http.ResponseWriter, r *http.Request) {
+
 		Admin := false
 		SuperIngenerQuality := false
 		LoggedIn := false
@@ -973,7 +1005,6 @@
 			LoggedIn = true
 			fmt.Println("SuperIngenerQuality - ", SuperIngenerQuality)
 		}
-
 		vars := mux.Vars(r)
 		id, err := strconv.Atoi(vars["ID"])
 		if err != nil {
@@ -994,7 +1025,7 @@
 			"Username":            user.FirstName,
 		}
 		tpl.ExecuteTemplate(w, "updatevendor.html", data)
-
+		///tpl.ExecuteTemplate(w, "layout", get)
 	}
 }
 
@@ -1009,260 +1040,11 @@
 	///		panic(err)
 	///	}
 	return func(w http.ResponseWriter, r *http.Request) {
-
-		req := &request{}
-		vars := mux.Vars(r)
-		id, err := strconv.Atoi(vars["ID"])
-		if err != nil {
-			log.Println(err)
-		}
-
-		req.ID = id
-		req.CodeDebitor = r.FormValue("codedebitor")
-		req.NameDebitor = r.FormValue("namedebitor")
-		fmt.Println("ID - ", req.ID)
-		u := &model.Vendor{
-			ID:          req.ID,
-			CodeDebitor: req.CodeDebitor,
-			NameDebitor: req.NameDebitor,
-		}
-
-		if err := s.store.Vendor().UpdateVendor(u); err != nil {
-			s.error(w, r, http.StatusUnprocessableEntity, err)
-			return
-		}
-
-		http.Redirect(w, r, "/showvendor", 303)
-
-	}
-
-}
-
-func (s *server) deleteVendor() http.HandlerFunc {
-	type request struct {
-		ID          int    `json:"ID"`
-		CodeDebitor string `json:"codedebitor"`
-		NameDebitor string `json:"namedebitor"`
-		SPPElement  string `json:"sppelement"`
-	}
-	///	_, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "updatevendor.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
-	return func(w http.ResponseWriter, r *http.Request) {
-		req := &request{}
-		vars := mux.Vars(r)
-		id, err := strconv.Atoi(vars["ID"])
-		if err != nil {
-			log.Println(err)
-		}
-
-		req.ID = id
-		//	req.CodeDebitor = r.FormValue("codedebitor")
-		//	req.NameDebitor = r.FormValue("namedebitor")
-		//	req.SPPElement = r.FormValue("sppelement")
-
-		u := &model.Vendor{
-			ID: req.ID,
-			//	CodeDebitor: req.CodeDebitor,
-			//	NameDebitor: req.NameDebitor,
-			//	SPPElement:  req.SPPElement,
-		}
-
-		if err := s.store.Vendor().DeleteVendor(u); err != nil {
-			s.error(w, r, http.StatusUnprocessableEntity, err)
-			return
-		}
-
-		/*	err = tpl.ExecuteTemplate(w, "layout", nil)
-			if err != nil {
-				http.Error(w, err.Error(), 400)
-				return
-			}*/
-		http.Redirect(w, r, "/showvendor", 303)
-	}
-}
-
-func (s *server) pageinInspection() http.HandlerFunc {
-	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "ininspection.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
-
-	return func(w http.ResponseWriter, r *http.Request) {
-		Admin := false
-		StockkeeperWH := false
-		LoggedIn := false
-
-		session, err := s.sessionStore.Get(r, sessionName)
-		if err != nil {
-			s.error(w, r, http.StatusInternalServerError, err)
-			return
-		}
-
-		id, ok := session.Values["user_id"]
-		if !ok {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		user, err := s.store.User().Find(id.(int))
-		if err != nil {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		if user.Role == "Administrator" {
-			Admin = true
-			LoggedIn = true
-		} else if user.Role == "кладовщик склада" {
-			StockkeeperWH = true
-			LoggedIn = true
-			fmt.Println("кладовщик склада - ", StockkeeperWH)
-		}
-		data := map[string]interface{}{
-			"Admin":         Admin,
-			"StockkeeperWH": StockkeeperWH,
-			//	"GET":           get,
-			"LoggedIn": LoggedIn,
-			"User":     user.LastName,
-			"Username": user.FirstName,
-		}
-		tpl.ExecuteTemplate(w, "ininspection.html", data)
-		///	tpl.ExecuteTemplate(w, "layout", nil)
-		///	err = tpl.ExecuteTemplate(w, "layout", nil)
-		///	if err != nil {
-		///		http.Error(w, err.Error(), 400)
-		///		return
-		///	}
-	}
-}
-
-func (s *server) inInspection() http.HandlerFunc {
-	type req struct {
-		ScanID         string `json:"scanid"`
-		SAP            int
-		Lot            string
-		Roll           int
-		Qty            int
-		ProductionDate string
-		NumberVendor   string
-		Location       string
-	}
-
-	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "ininspection.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
-
-	return func(w http.ResponseWriter, r *http.Request) {
-		body, err := ioutil.ReadAll(r.Body)
-		if err != nil {
-			log.Fatal(err)
-		}
-
-		var rdata []req
-		json.Unmarshal(body, &rdata)
-		fmt.Printf("test ininspection %s", body)
-		fmt.Println("\nall of the rdata ininspection", rdata)
-
-		session, err := s.sessionStore.Get(r, sessionName)
-		if err != nil {
-			s.error(w, r, http.StatusInternalServerError, err)
-			return
-		}
-
-		id, ok := session.Values["user_id"]
-		if !ok {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		user, err := s.store.User().Find(id.(int))
-		if err != nil {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		const statusTransfer = "отгружено на ВК"
-
-		for _, v := range rdata {
-			idMaterial := v.ScanID[0:45]
-			sapStr := v.ScanID[1:8]
-			sap := v.SAP
-			sap, err := strconv.Atoi(sapStr)
-			if err != nil {
-				fmt.Println(err)
-			}
-			idrollStr := v.ScanID[20:30]
-			idrollIns := v.Roll
-			idrollIns, err = strconv.Atoi(idrollStr)
-			if err != nil {
-				fmt.Println(err)
-			}
-			v.Lot = v.ScanID[9:19]
-			qtyStr := v.ScanID[31:36]
-			qtyIns := v.Qty
-			qtyIns, err2 := strconv.Atoi(qtyStr)
-			if err != nil {
-				fmt.Println(err2)
-			}
-			v.ProductionDate = v.ScanID[37:45]
-			v.NumberVendor = v.ScanID[9:15]
-			fmt.Println("v.NumberVendor", v.NumberVendor)
-			if (strings.Contains(v.ScanID[0:1], "P") == true) && (len(v.ScanID) == 45) {
-				u := &model.Inspection{
-					IdMaterial:     idMaterial,
-					SAP:            sap,
-					Lot:            v.Lot,
-					IdRoll:         idrollIns,
-					Qty:            qtyIns,
-					ProductionDate: v.ProductionDate,
-					NumberVendor:   v.NumberVendor,
-					Location:       statusTransfer,
-					Lastname:       user.LastName,
-				}
-				if err := s.store.Inspection().InInspection(u); err != nil {
-					s.error(w, r, http.StatusUnprocessableEntity, err)
-
-					return
-				}
-			} else {
-				if (strings.Contains(v.ScanID[0:1], "P") == false) && (len(v.ScanID) != 45) {
-					fmt.Println("не верное сканирование :\n" + v.ScanID + "\n")
-					//	fmt.Fprintf(w, "не верное сканирование :"+v.ScanID)
-				}
-				//	tpl.Execute(w, data)
-				return
-			}
-		}
-
-		err = tpl.ExecuteTemplate(w, "ininspection.html", nil)
-		if err != nil {
-			http.Error(w, err.Error(), 400)
-			return
-		}
-
-	}
-}
-
-func (s *server) pageupdateInspection() http.HandlerFunc {
-	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "updateinspection.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
-	return func(w http.ResponseWriter, r *http.Request) {
+		fmt.Println("Start")
 		Admin := false
 		SuperIngenerQuality := false
-		Inspector := false
 		LoggedIn := false
 
-		vars := mux.Vars(r)
-		id, err := strconv.Atoi(vars["ID"])
-		if err != nil {
-			log.Println(err)
-		}
-
 		session, err := s.sessionStore.Get(r, sessionName)
 		if err != nil {
 			s.error(w, r, http.StatusInternalServerError, err)
@@ -1280,7 +1062,6 @@
 			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
 			return
 		}
-		fmt.Println("user.Groups - ?", user.Groups)
 
 		if user.Role == "Administrator" {
 			Admin = true
@@ -1289,46 +1070,8 @@
 			SuperIngenerQuality = true
 			LoggedIn = true
 			fmt.Println("SuperIngenerQuality - ", SuperIngenerQuality)
-		} else if user.Role == "контроллер качества" {
-			Inspector = true
-			LoggedIn = true
-
-		}
-		//fmt.Println("ID - ?", id)
-		get, err := s.store.Inspection().EditInspection(id, user.Groups)
-		if err != nil {
-			s.error(w, r, http.StatusUnprocessableEntity, err)
-			return
 		}
-		data := map[string]interface{}{
-			"Admin":               Admin,
-			"SuperIngenerQuality": SuperIngenerQuality,
-			"Inspector":           Inspector,
-			"GET":                 get,
-			"LoggedIn":            LoggedIn,
-			"User":                user.LastName,
-			"Username":            user.FirstName,
-		}
-		err = tpl.ExecuteTemplate(w, "updateinspection.html", data)
-		if err != nil {
-			http.Error(w, err.Error(), 400)
-			return
-		}
-	}
-}
-
-func (s *server) updateInspection() http.HandlerFunc {
-	type request struct {
-		ID     int    `json:"ID"`
-		Status string `json:"status"`
-		Note   string `json:"note"`
-	}
-	///	_, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "updateinspection.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
 
-	return func(w http.ResponseWriter, r *http.Request) {
 		req := &request{}
 		vars := mux.Vars(r)
 		id, err := strconv.Atoi(vars["ID"])
@@ -1336,160 +1079,36 @@
 			log.Println(err)
 		}
 
-		currentTime := time.Now()
-
-		session, err := s.sessionStore.Get(r, sessionName)
-		if err != nil {
-			s.error(w, r, http.StatusInternalServerError, err)
-			return
-		}
-
-		idd, ok := session.Values["user_id"]
-		if !ok {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		user, err := s.store.User().Find(idd.(int))
-		if err != nil {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
 		req.ID = id
-		req.Status = r.FormValue("status")
-		req.Note = r.FormValue("note")
-
-		u := &model.Inspection{
-			ID:         req.ID,
-			Status:     req.Status,
-			Note:       req.Note,
-			Update:     user.LastName, //
-			Dateupdate: currentTime,   // Dateaccept
-			Timeupdate: currentTime,   // Timeaccept
-			Groups:     user.Groups,
+		req.CodeDebitor = r.FormValue("codedebitor")
+		req.NameDebitor = r.FormValue("namedebitor")
+		fmt.Println("ID - ", req.ID)
+		u := &model.Vendor{
+			ID:          req.ID,
+			CodeDebitor: req.CodeDebitor,
+			NameDebitor: req.NameDebitor,
 		}
 
-		if err := s.store.Inspection().UpdateInspection(u, user.Groups); err != nil {
+		if err := s.store.Vendor().UpdateVendor(u); err != nil {
 			s.error(w, r, http.StatusUnprocessableEntity, err)
 			return
 		}
-
+		data := map[string]interface{}{
+			"Admin":               Admin,
+			"SuperIngenerQuality": SuperIngenerQuality,
+			//	"GET":                 get,
+			"LoggedIn": LoggedIn,
+			"User":     user.LastName,
+			"Username": user.FirstName,
+		}
+		//tpl.ExecuteTemplate(w, "showvendor.html", data)
 		/*	err = tpl.ExecuteTemplate(w, "layout", nil)
 			if err != nil {
-				http.Error(w, err.Error(), 400)
+				http.Error(w, erqr.Error(), 400)
 				return
 			}*/
-		http.Redirect(w, r, "/statusinspection", 303)
-	}
-}
-
-func (s *server) deleteInspection() http.HandlerFunc {
-	type request struct {
-		ID int `json:"ID"`
-	}
-	///	_, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "updateinspection.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
-	return func(w http.ResponseWriter, r *http.Request) {
-		req := &request{}
-		vars := mux.Vars(r)
-		id, err := strconv.Atoi(vars["ID"])
-		if err != nil {
-			log.Println(err)
-		}
-
-		req.ID = id
-
-		u := &model.Inspection{
-			ID: req.ID,
-		}
-
-		if err := s.store.Inspection().DeleteItemInspection(u); err != nil {
-			s.error(w, r, http.StatusUnprocessableEntity, err)
-			return
-		}
-
-		http.Redirect(w, r, "/statusinspection", 303)
-	}
-}
-
-//ListAcceptWHInspection
-func (s *server) pageListAcceptWHInspection() http.HandlerFunc { // acceptinspection.html showinspection.html
-	///	tpl, err := template.New("").Delims("<<", ">>").ParseFiles(s.html + "acceptinspection.html")
-	///	if err != nil {
-	///		panic(err)
-	///	}
-	return func(w http.ResponseWriter, r *http.Request) {
-		Admin := false
-		StockkeeperWH := false
-		LoggedIn := false
-		stockkeeperWH := false
-		//superIngenerQuality := true
-		//quality := false
-		//	statusStr := false
-
-		session, err := s.sessionStore.Get(r, sessionName)
-		if err != nil {
-			s.error(w, r, http.StatusInternalServerError, err)
-			return
-		}
-
-		id, ok := session.Values["user_id"]
-		if !ok {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		user, err := s.store.User().Find(id.(int))
-		if err != nil {
-			s.error(w, r, http.StatusUnauthorized, errNotAuthenticated)
-			return
-		}
-
-		if user.Groups == "склад" {
-			stockkeeperWH = true
-		}
-		/*
-			if user.Groups == "качество" {
-				quality = true
-			} else if user.Groups == "склад" {
-				stockkeeperWH = true
-			}
-		*/
-		if user.Role == "Administrator" {
-			Admin = true
-			LoggedIn = true
-		} else if user.Role == "кладовщик склада" {
-			StockkeeperWH = true
-			LoggedIn = true
-			fmt.Println("кладовщик склада - ", StockkeeperWH)
-		}
-		get, err := s.store.Inspection().ListAcceptWHInspection()
-		if err != nil {
-			s.error(w, r, http.StatusUnprocessableEntity, err)
-			return
-		}
-		groups := map[string]interface{}{
-			//	"quality":   quality,
-			"Warehouse": stockkeeperWH,
-			//	"SuperIngenerQuality": superIngenerQuality,
-			"GET": get,
-			//	"status":    statusStr,
-			"Admin":         Admin,
-			"StockkeeperWH": StockkeeperWH,
-			"LoggedIn":      LoggedIn,
-			"User":          user.LastName,
-			"Username":      user.FirstName,
-		}
-
-		err = tpl.ExecuteTemplate(w, "acceptinspection.html", groups)
-
-		if err != nil {
-			http.Error(w, err.Error(), 400)
-			return
-		}
+		tpl.ExecuteTemplate(w, "updatevendor.html", data)
+		//http.Redirect(w, r, "/showvendor", 303)
 	}
 }
 
